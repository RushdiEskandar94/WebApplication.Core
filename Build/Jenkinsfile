pipeline {
			agent any
			environment{
				RELEASE_VERSION = "1.0.1"
            }
			options {
				buildDiscarder(logRotator(numToKeepStr:'5'))
			}
			stages {
				stage('Get Source'){
					steps{
						checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/alanmacgowan/WebApplication.Core.git']]])
					}
				}
				stage('Restore dependencies'){
					parallel {
        				stage('Restore packages'){
                           steps{
                              bat "dotnet restore WebApplication.Core.sln"
                            }
                        }
                		stage('NodeJS'){
        					steps{
        						nodejs(nodeJSInstallationName: 'Node') {
        							dir('WebApplication.Core.UI')
        							{
        								bat 'npm install && npm run production'
        							}
        						}
        					}
        				}
					}
				}	
                stage('Build'){
                   steps{
                      bat "dotnet build WebApplication.Core.sln --no-restore --configuration Stage /p:AssemblyVersion=${env.RELEASE_VERSION}.${env.BUILD_NUMBER}"
                    }
                }
                stage('Test: Unit Test'){
                   steps {
                     bat "dotnet test WebApplication.Core.Tests.Unit\\WebApplication.Core.Tests.Unit.csproj  -l:trx;LogFileName=Results_${env.BUILD_NUMBER}.trx --collect:\"XPlat Code Coverage\""
                    step([$class: 'MSTestPublisher', testResultsFile:"**/*.trx", failOnError: true, keepLongStdio: true])
                    }
                }
                stage('Publish QA'){
					parallel {
                        stage('Publish API: QA'){
                             steps{
                               bat "dotnet publish WebApplication.Core.API\\WebApplication.Core.API.csproj --no-build --configuration Stage -o C:\\Jenkins_builds\\sites\\devAPI"
                            }
                        }
                        stage('Publish UI: QA'){
                             steps{
                               bat "dotnet publish WebApplication.Core.UI\\WebApplication.Core.UI.csproj --no-build --configuration Stage -o C:\\Jenkins_builds\\sites\\dev"
                            }
                        }
					}
                }	
                stage('Smoke Test QA') {
					steps {
						smokeTest("http://localhost:8090/")
						smokeTest("http://localhost:4091/swagger/index.html")
					}
				}
                stage('Run Tests'){
					parallel {
        				stage('Test: Integration Test'){
                            steps {
                                dir('WebApplication.Core.Tests.Integration')
                                {
                                    bat """
                                        set BASE_URL=http://localhost:8090
                                        set WebApplication_ConnectionString=\"Data Source=localhost; Initial Catalog=DatabaseQA; Integrated Security=True;\"
                                        dotnet test WebApplication.Core.Tests.Integration.csproj
                                    """
                                } 
                            }
                        }
        				stage('Test: Acceptance test') {
        				    steps {
        				        dir('WebApplication.Core.Tests.Acceptance')
                                {
                                    bat """
                                        set BASE_URL=http://localhost:8090
                                        set WebApplication_ConnectionString=\"Data Source=localhost; Initial Catalog=DatabaseQA; Integrated Security=True;\"
                                        dotnet test WebApplication.Core.Tests.Acceptance.csproj
                                    """
                                }
                                //step([$class: 'MSTestPublisher', testResultsFile:"**/*.trx", failOnError: true, keepLongStdio: true])
                            }
                        }                        
        				stage('Test: Performance Test'){
                            steps {
                                dir('Performance Tests')
                                {
                                    bat "k6 run -e BASE_URL=http://localhost:4091 k6_script.js"
                                }
                            }
                        }
        				stage('Test: API Test'){
                            steps {
                                dir('Postman')
                                {
                                    bat "newman run WebApplicationCore.postman_collection.json --global-var \"BASE_URL=http://localhost:4091\" --bail"
                                }
                            }
                        }                        
					}
                }	
			}	
}

void smokeTest(String url){
    def status = powershell (returnStatus: true, script: """
		\$result = Invoke-WebRequest $url
		if (\$result.StatusCode -ne 200) {
			Write-Error \"Did not get 200 OK\"
			exit 1
		} else{
			Write-Host \"Successfully connect.\"
		}
    """)
    if (status != 0) {
       error "Smoke test failed: $url"
    }
}
				